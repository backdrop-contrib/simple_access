<?php

/**
 * @file
 * Installation for Simple Access
 */

/**
 * Implements hook_install().
 */
function simple_access_install() {
  db_update('system')
    ->fields(array('weight' => 9))
    ->condition('name', 'simple_access')
    ->execute();

  $t = get_t();
  backdrop_set_message($t('Simple Access has created the required tables.'));
}


/**
 * Implements hook_enable().
 */
function simple_access_enable() {
  backdrop_set_message(t('To fully activate Simple Access you also need to !rebuild_permissions.', array('!rebuild_permissions' => l(t('rebuild permissions'), 'admin/reports/status/rebuild'))));
}

/**
 * Implements hook_disable().
 */
function simple_access_disable() {
  backdrop_set_message(t('To fully disable Simple Access you also need to !rebuild_permissions.', array('!rebuild_permissions' => l(t('rebuild permissions'), 'admin/reports/status/rebuild'))));
}

/**
 * Implements hook_schema().
 */
function simple_access_schema() {
  $schema = array();

  $schema['simple_access_node'] = array(
    'description' => 'Define all permissions for each node',
    'fields' => array(
      'nid' => array(
        'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE,
        'default' => 0,
      ),
      'gid' => array(
        'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE,
        'default' => 0,
      ),
      'sa_view' => array(
        'type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE,
        'not null' => TRUE, 'default' => 0,
      ),
      'sa_update' => array(
        'type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE,
        'not null' => TRUE, 'default' => 0,
      ),
      'sa_delete' => array(
        'type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE,
        'not null' => TRUE, 'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'gid'),
  );
  $schema['simple_access_owner'] = array(
    'fields' => array(
      'nid' => array('type' => 'int', 'unsigned' => TRUE,
        'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'sa_view' => array('type' => 'int', 'unsigned' => TRUE,
        'size' => 'tiny', 'not null' => TRUE, 'default' => 0,
        'disp-width' => '3'),
      'sa_update' => array('type' => 'int', 'unsigned' => TRUE,
        'size' => 'tiny', 'not null' => TRUE, 'default' => 0,
        'disp-width' => '3'),
      'sa_delete' => array('type' => 'int', 'unsigned' => TRUE,
        'size' => 'tiny', 'not null' => TRUE, 'default' => 0,
        'disp-width' => '3')),
    'primary key' => array('nid'),
  );
  $schema['simple_access_profiles_node'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'pid'),
  );

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function simple_access_update_last_removed() {
  return 7202;
}

/**
 * Move settings from variables to config.
 */
function simple_access_update_1000() {
  // Migrate variables to config.
  $config = config('simple_access.settings');
  $config->set('simple_access_display', update_variable_get('simple_access_display', array()));
  $config->set('simple_access_showgroups', update_variable_get('simple_access_showgroups', 0));
  $config->save();
  }

/**
 * Delete unused variables.
 */
function simple_access_update_1001() {
  // Delete variables.
  update_variable_del('simple_access_display');
  update_variable_del('simple_access_showgroups');
}

/**
 * Update table columns.
 */
function simple_access_update_1002() {
  // Update role ID to be a varchar instead of an integer.
  if (db_field_exists('simple_access_roles', 'rid')) {
    db_drop_primary_key('simple_access_roles');
    db_drop_index('simple_access_roles', 'rid');
    $role_column = array(
      'type' => 'varchar',
      'length' => 20,
      'description' => 'The role name.',
      'not null' => TRUE,
      'default' => '',
    );
    db_change_field('simple_access_roles', 'rid', 'role', $role_column);

    db_add_primary_key('simple_access_roles', array('gid', 'role'));
    db_add_index('simple_access_roles', 'role', array('role'));
  }

  $roles = array(
    '1' => 'anonymous',
    '2' => 'authenticated',
  );
  foreach ($roles as $rid => $name) {
    // Update the simple_access_roles table to match the new role names.
    db_update('simple_access_roles')
      ->fields(array(
        'role' => $name,
      ))
      ->condition('role', $rid)
      ->execute();
  }

  db_drop_field('simple_access_roles', 'rid');
  }

/**
 * Drop database table simple_access_profiles_nodetype.
 */
function simple_access_update_1003() {
  if (db_table_exists('simple_access_profiles_nodetype')) {
    db_drop_table('simple_access_profiles_nodetype');
  }
}

/**
 * Move config out of database.
 */
function simple_access_update_1004() {
  $config = config('simple_access.settings');
  if (db_table_exists('simple_access_groups')) {
    $groups = db_select('simple_access_groups', 'g')
    ->fields('g')
    ->execute()
    ->fetchAllAssoc('gid');

    foreach ($groups as $group) {
      $config->set('groups.' . $group->gid, array(
        'gid' => $group->gid,
        'name' => $group->name,
        'weight' => $group->weight,
      ));
    }
    $config->save();
    db_drop_table('simple_access_groups');
  }

  if (db_table_exists('simple_access_roles')) {
    $roles = db_select('simple_access_roles', 'r')
    ->fields('r')
    ->execute()
    ->fetchAll();

    $existing_roles = array();

    foreach ($roles as $role) {
      $existing_roles = $config->get('groups.' . $role->gid . '.roles');
      $existing_roles[] = $role->role;
      $config->set('groups.' . $role->gid . '.roles', $existing_roles);
    }
    $config->save();
    db_drop_table('simple_access_roles');
  }

  if (db_table_exists('simple_access_profiles')) {
    $profiles = db_select('simple_access_profiles', 'p')
    ->fields('p')
    ->execute()
    ->fetchAllAssoc('pid');

    foreach ($profiles as $profile) {
      $config->set('profiles.' . $profile->pid, array(
        'pid' => $profile->pid,
        'name' => $profile->name,
        'weight' => $profile->weight,
      ));
    }
    $config->save();
    db_drop_table('simple_access_profiles');
  }

  if (db_table_exists('simple_access_profiles_access')) {
    $profiles_access = db_select('simple_access_profiles_access', 'pa')
    ->fields('pa')
    ->execute()
    ->fetchAll();

    foreach ($profiles_access as $access) {
      $config->set('profiles.' . $access->pid . '.access.' . $access->gid, array(
        'gid' => $access->gid,
        'sa_view' => $access->sa_view,
        'sa_update' => $access->sa_update,
        'sa_delete' => $access->sa_delete,
      ));
    }
    $config->save();
    db_drop_table('simple_access_profiles_access');
  }

}